/* 
 *  DSP.js - a comprehensive digital signal processing  library for javascript
 * 
 *  Created by Corban Brook <corbanbrook@gmail.com> on 2010-01-01.
 *  Copyright 2010 Corban Brook. All rights reserved.
 *
 */

////////////////////////////////////////////////////////////////////////////////
//                                  CONSTANTS                                 //
////////////////////////////////////////////////////////////////////////////////

/**
 * DSP is an object which contains general purpose utility functions and constants
 */
var DSP = {
	// Channels
	LEFT: 0,
	RIGHT: 1,
	MIX: 2,

	// Waveforms
	SINE: 1,
	TRIANGLE: 2,
	SAW: 3,
	SQUARE: 4,

	// Filters
	LOWPASS: 0,
	HIGHPASS: 1,
	BANDPASS: 2,
	NOTCH: 3,

	// Window functions
	BARTLETT: 1,
	BARTLETTHANN: 2,
	BLACKMAN: 3,
	COSINE: 4,
	GAUSS: 5,
	HAMMING: 6,
	HANN: 7,
	LANCZOS: 8,
	RECTANGULAR: 9,
	TRIANGULAR: 10,

	// Loop modes
	OFF: 0,
	FW: 1,
	BW: 2,
	FWBW: 3,

	// Math
	TWO_PI: 2 * Math.PI
};

// Setup arrays for platforms which do not support byte arrays
function setupTypedArray(name, fallback) {
	// check if TypedArray exists
	// typeof on Minefield and Chrome return function, typeof on Webkit returns object.
	if (typeof this[name] !== "function" && typeof this[name] !== "object") {
		// nope.. check if WebGLArray exists
		if (typeof this[fallback] === "function" && typeof this[fallback] !== "object") {
			this[name] = this[fallback];
		} else {
			// nope.. set as Native JS array
			this[name] = function(obj) {
				if (obj instanceof Array) {
					return obj;
				} else if (typeof obj === "number") {
					return new Array(obj);
				}
			};
		}
	}
}

setupTypedArray("Float64Array", "WebGLFloatArray");
setupTypedArray("Int32Array", "WebGLIntArray");
setupTypedArray("Uint16Array", "WebGLUnsignedShortArray");
setupTypedArray("Uint8Array", "WebGLUnsignedByteArray");


////////////////////////////////////////////////////////////////////////////////
//                            DSP UTILITY FUNCTIONS                           //
////////////////////////////////////////////////////////////////////////////////

/**
 * Inverts the phase of a signal
 *
 * @param {Array} buffer A sample buffer
 *
 * @returns The inverted sample buffer
 */
DSP.invert = function(buffer) {
	for (var i = 0, len = buffer.length; i < len; i++) {
		buffer[i] *= -1;
	}

	return buffer;
};

/**
 * Converts split-stereo (dual mono) sample buffers into a stereo interleaved sample buffer
 *
 * @param {Array} left  A sample buffer
 * @param {Array} right A sample buffer
 *
 * @returns The stereo interleaved buffer
 */
DSP.interleave = function(left, right) {
	if (left.length !== right.length) {
		throw "Can not interleave. Channel lengths differ.";
	}

	var stereoInterleaved = new Float64Array(left.length * 2);

	for (var i = 0, len = left.length; i < len; i++) {
		stereoInterleaved[2 * i] = left[i];
		stereoInterleaved[2 * i + 1] = right[i];
	}

	return stereoInterleaved;
};

/**
 * Converts a stereo-interleaved sample buffer into split-stereo (dual mono) sample buffers
 *
 * @param {Array} buffer A stereo-interleaved sample buffer
 *
 * @returns an Array containing left and right channels
 */
DSP.deinterleave = (function() {
	var left, right, mix, deinterleaveChannel = [];

	deinterleaveChannel[DSP.MIX] = function(buffer) {
		for (var i = 0, len = buffer.length / 2; i < len; i++) {
			mix[i] = (buffer[2 * i] + buffer[2 * i + 1]) / 2;
		}
		return mix;
	};

	deinterleaveChannel[DSP.LEFT] = function(buffer) {
		for (var i = 0, len = buffer.length / 2; i < len; i++) {
			left[i] = buffer[2 * i];
		}
		return left;
	};

	deinterleaveChannel[DSP.RIGHT] = function(buffer) {
		for (var i = 0, len = buffer.length / 2; i < len; i++) {
			right[i] = buffer[2 * i + 1];
		}
		return right;
	};

	return function(channel, buffer) {
		left = left || new Float64Array(buffer.length / 2);
		right = right || new Float64Array(buffer.length / 2);
		mix = mix || new Float64Array(buffer.length / 2);

		if (buffer.length / 2 !== left.length) {
			left = new Float64Array(buffer.length / 2);
			right = new Float64Array(buffer.length / 2);
			mix = new Float64Array(buffer.length / 2);
		}

		return deinterleaveChannel[channel](buffer);
	};
}());

/**
 * Separates a channel from a stereo-interleaved sample buffer
 *
 * @param {Array}  buffer A stereo-interleaved sample buffer
 * @param {Number} channel A channel constant (LEFT, RIGHT, MIX)
 *
 * @returns an Array containing a signal mono sample buffer
 */
DSP.getChannel = DSP.deinterleave;

/**
 * Helper method (for Reverb) to mix two (interleaved) samplebuffers. It's possible
 * to negate the second buffer while mixing and to perform a volume correction
 * on the final signal.
 *
 * @param {Array} sampleBuffer1 Array containing Float values or a Float64Array
 * @param {Array} sampleBuffer2 Array containing Float values or a Float64Array
 * @param {Boolean} negate When true inverts/flips the audio signal
 * @param {Number} volumeCorrection When you add multiple sample buffers, use this to tame your signal ;)
 *
 * @returns A new Float64Array interleaved buffer.
 */
DSP.mixSampleBuffers = function(sampleBuffer1, sampleBuffer2, negate, volumeCorrection) {
	var outputSamples = new Float64Array(sampleBuffer1);

	for (var i = 0; i < sampleBuffer1.length; i++) {
		outputSamples[i] += (negate ? -sampleBuffer2[i] : sampleBuffer2[i]) / volumeCorrection;
	}

	return outputSamples;
};

// Find RMS of signal
DSP.RMS = function(buffer) {
	var total = 0;

	for (var i = 0, n = buffer.length; i < n; i++) {
		total += buffer[i] * buffer[i];
	}

	return Math.sqrt(total / n);
};

// Find Peak of signal
DSP.Peak = function(buffer) {
	var peak = 0;

	for (var i = 0, n = buffer.length; i < n; i++) {
		peak = (Math.abs(buffer[i]) > peak) ? Math.abs(buffer[i]) : peak;
	}

	return peak;
};

// Fourier Transform Module used by DFT, FFT, RFFT
function FourierTransform(bufferSize, sampleRate) {
	this.bufferSize = bufferSize;
	this.sampleRate = sampleRate;
	this.bandwidth = 2 / bufferSize * sampleRate / 2;

	this.spectrum = new Float64Array(bufferSize / 2);
	this.real = new Float64Array(bufferSize);
	this.imag = new Float64Array(bufferSize);

	this.peakBand = 0;
	this.peak = 0;

	/**
	 * Calculates the *middle* frequency of an FFT band.
	 *
	 * @param {Number} index The index of the FFT band.
	 *
	 * @returns The middle frequency in Hz.
	 */
	this.getBandFrequency = function(index) {
		return this.bandwidth * index + this.bandwidth / 2;
	};

	this.calculateSpectrum = function() {
		var spectrum = this.spectrum,
			real = this.real,
			imag = this.imag,
			bSi = 2 / this.bufferSize,
			sqrt = Math.sqrt,
			rval,
			ival,
			mag;

		for (var i = 0, N = bufferSize / 2; i < N; i++) {
			rval = real[i];
			ival = imag[i];
			mag = bSi * sqrt(rval * rval + ival * ival);

			if (mag > this.peak) {
				this.peakBand = i;
				this.peak = mag;
			}

			spectrum[i] = mag;
		}
	};
}


/**
 * FFT is a class for calculating the Discrete Fourier Transform of a signal
 * with the Fast Fourier Transform algorithm.
 *
 * @param {Number} bufferSize The size of the sample buffer to be computed. Must be power of 2
 * @param {Number} sampleRate The sampleRate of the buffer (eg. 44100)
 *
 * @constructor
 */
function FFT(bufferSize, sampleRate) {
	FourierTransform.call(this, bufferSize, sampleRate);

	this.reverseTable = new Uint32Array(bufferSize);

	var limit = 1;
	var bit = bufferSize >> 1;

	var i;

	while (limit < bufferSize) {
		for (i = 0; i < limit; i++) {
			this.reverseTable[i + limit] = this.reverseTable[i] + bit;
		}

		limit = limit << 1;
		bit = bit >> 1;
	}

	this.sinTable = new Float64Array(bufferSize);
	this.cosTable = new Float64Array(bufferSize);

	for (i = 0; i < bufferSize; i++) {
		this.sinTable[i] = Math.sin(-Math.PI / i);
		this.cosTable[i] = Math.cos(-Math.PI / i);
	}
}

/**
 * Performs a forward transform on the sample buffer.
 * Converts a time domain signal to frequency domain spectra.
 *
 * @param {Array} buffer The sample buffer. Buffer Length must be power of 2
 *
 * @returns The frequency spectrum array
 */
FFT.prototype.forward = function(buffer) {
	// Locally scope variables for speed up
	var bufferSize = this.bufferSize,
		cosTable = this.cosTable,
		sinTable = this.sinTable,
		reverseTable = this.reverseTable,
		real = this.real,
		imag = this.imag,
		spectrum = this.spectrum;

	var k = Math.floor(Math.log(bufferSize) / Math.LN2);

	if (Math.pow(2, k) !== bufferSize) {
		throw "Invalid buffer size, must be a power of 2.";
	}
	if (bufferSize !== buffer.length) {
		throw "Supplied buffer is not the same size as defined FFT. FFT Size: " + bufferSize + " Buffer Size: " + buffer.length;
	}

	var halfSize = 1,
		phaseShiftStepReal,
		phaseShiftStepImag,
		currentPhaseShiftReal,
		currentPhaseShiftImag,
		off,
		tr,
		ti,
		tmpReal,
		i;

	for (i = 0; i < bufferSize; i++) {
		real[i] = buffer[reverseTable[i]];
		imag[i] = 0;
	}

	while (halfSize < bufferSize) {
		//phaseShiftStepReal = Math.cos(-Math.PI/halfSize);
		//phaseShiftStepImag = Math.sin(-Math.PI/halfSize);
		phaseShiftStepReal = cosTable[halfSize];
		phaseShiftStepImag = sinTable[halfSize];

		currentPhaseShiftReal = 1;
		currentPhaseShiftImag = 0;

		for (var fftStep = 0; fftStep < halfSize; fftStep++) {
			i = fftStep;

			while (i < bufferSize) {
				off = i + halfSize;
				tr = (currentPhaseShiftReal * real[off]) - (currentPhaseShiftImag * imag[off]);
				ti = (currentPhaseShiftReal * imag[off]) + (currentPhaseShiftImag * real[off]);

				real[off] = real[i] - tr;
				imag[off] = imag[i] - ti;
				real[i] += tr;
				imag[i] += ti;

				i += halfSize << 1;
			}

			tmpReal = currentPhaseShiftReal;
			currentPhaseShiftReal = (tmpReal * phaseShiftStepReal) - (currentPhaseShiftImag * phaseShiftStepImag);
			currentPhaseShiftImag = (tmpReal * phaseShiftStepImag) + (currentPhaseShiftImag * phaseShiftStepReal);
		}

		halfSize = halfSize << 1;
	}

	return this.calculateSpectrum();
};

FFT.prototype.inverse = function(real, imag) {
	// Locally scope variables for speed up
	var bufferSize = this.bufferSize,
		cosTable = this.cosTable,
		sinTable = this.sinTable,
		reverseTable = this.reverseTable,
		spectrum = this.spectrum;

	real = real || this.real;
	imag = imag || this.imag;

	var halfSize = 1,
		phaseShiftStepReal,
		phaseShiftStepImag,
		currentPhaseShiftReal,
		currentPhaseShiftImag,
		off,
		tr,
		ti,
		tmpReal,
		i;

	for (i = 0; i < bufferSize; i++) {
		imag[i] *= -1;
	}

	var revReal = new Float64Array(bufferSize);
	var revImag = new Float64Array(bufferSize);

	for (i = 0; i < real.length; i++) {
		revReal[i] = real[reverseTable[i]];
		revImag[i] = imag[reverseTable[i]];
	}

	real = revReal;
	imag = revImag;

	while (halfSize < bufferSize) {
		phaseShiftStepReal = cosTable[halfSize];
		phaseShiftStepImag = sinTable[halfSize];
		currentPhaseShiftReal = 1;
		currentPhaseShiftImag = 0;

		for (var fftStep = 0; fftStep < halfSize; fftStep++) {
			i = fftStep;

			while (i < bufferSize) {
				off = i + halfSize;
				tr = (currentPhaseShiftReal * real[off]) - (currentPhaseShiftImag * imag[off]);
				ti = (currentPhaseShiftReal * imag[off]) + (currentPhaseShiftImag * real[off]);

				real[off] = real[i] - tr;
				imag[off] = imag[i] - ti;
				real[i] += tr;
				imag[i] += ti;

				i += halfSize << 1;
			}

			tmpReal = currentPhaseShiftReal;
			currentPhaseShiftReal = (tmpReal * phaseShiftStepReal) - (currentPhaseShiftImag * phaseShiftStepImag);
			currentPhaseShiftImag = (tmpReal * phaseShiftStepImag) + (currentPhaseShiftImag * phaseShiftStepReal);
		}

		halfSize = halfSize << 1;
	}

	var buffer = new Float64Array(bufferSize); // this should be reused instead
	for (i = 0; i < bufferSize; i++) {
		buffer[i] = real[i] / bufferSize;
	}

	return buffer;
};



dBA = [];
Aweighting = [5.442771820166846e-18, 3.743323969688323e-07, 2.591226583718587e-05, 0.00020517861685927246, 0.000746577574757026, 0.0018592748594441978, 0.003712692371215629, 0.0064228693308205605, 0.010054643724618824, 0.014631596497654066, 0.020147781964353784, 0.02657801706626748, 0.0338856438154558, 0.04202784450389124, 0.05095902754378446, 0.06063285371688383, 0.07100337325428047, 0.08202561427055971, 0.09365585048375079, 0.10585169263657969, 0.1185720910685605, 0.13177730005728985, 0.1454288316510689, 0.1594894129528904, 0.1739229528266684, 0.18869451955668745, 0.20377032868128278, 0.21911773915813035, 0.23470525566161418, 0.2505025348385765, 0.2664803935662897, 0.2826108175554375, 0.2988669689595009, 0.31522319195730036, 0.3316550155513777, 0.3481391530649921, 0.3646534980235918, 0.3811771162744739, 0.39769023433403333, 0.4141742240592118, 0.43061158382218007, 0.44698591642852403, 0.4632819040625005, 0.47948528057128553, 0.49558280141610783, 0.5115622116241156, 0.5274122120726752, 0.543122424429335, 0.558683355057322, 0.5740863581794622, 0.5893235985738459, 0.6043880140533181, 0.619273277958636, 0.633973761872567, 0.6484844987397012, 0.6628011465547844, 0.676919952761162, 0.6908377194807456, 0.7045517696778817, 0.7180599143417591, 0.7313604207555761, 0.7444519819056552, 0.7573336870700027, 0.7700049936134927, 0.7824657000058054, 0.7947159200684809, 0.806756058448817, 0.8185867873108754, 0.8302090242273586, 0.841623911250639, 0.8528327951365657, 0.8638372086908507, 0.8746388532047188, 0.8852395819440358, 0.8956413846542641, 0.905846373042214, 0.9158567671946676, 0.9256748828934229, 0.9353031197861699, 0.9447439503727267, 0.9539999097665723, 0.963073586192215, 0.9719676121797335, 0.9806846564187685, 0.9892274162352983, 0.9975986106556906, 1.0058009740237632, 1.0138372501378456, 1.021710186876175, 1.0294225312802907, 1.0369770250674293, 1.044376400544294, 1.0516233768958736, 1.0587206568243337, 1.0656709235142623, 1.0724768379018292, 1.079141036226639, 1.0856661278462278, 1.0920546932943127, 1.0983092825649945, 1.1044324136061696, 1.1104265710064245, 1.1162942048606392, 1.1220377298004685, 1.127659524176718, 1.1331619293814965, 1.1385472492987831, 1.1438177498728315, 1.1489756587845028, 1.1540231652263284, 1.1589624197676904, 1.163795534302144, 1.1685245820694345, 1.1731515977453049, 1.1776785775926708, 1.1821074796682214, 1.1864402240789198, 1.190678693283296, 1.1948247324328072, 1.1988801497488877, 1.2028467169316537, 1.2067261695965394, 1.2105202077354171, 1.2142304961990498, 1.2178586651979557, 1.2214063108190072, 1.224874995555316, 1.2282662488471363, 1.2315815676317345, 1.2348224169003306, 1.2379902302603916, 1.2410864105016979, 1.2441123301647556, 1.2470693321102586, 1.2499587300884034, 1.252781809307008, 1.2555398269974596, 1.2582340129776217, 1.2608655702109215, 1.2634356753609233, 1.2659454793407539, 1.2683961078568393, 1.2707886619464488, 1.2731242185086253, 1.2754038308281201, 1.2776285290920062, 1.2797993208986878, 1.2819171917590648, 1.2839831055896562, 1.2859980051975062, 1.2879628127567533, 1.2898784302767408, 1.2917457400616015, 1.293565605161262, 1.2953388698138297, 1.2970663598793508, 1.2987488832649539, 1.300387230341392, 1.3019821743510205, 1.3035344718072726, 1.3050448628856803, 1.3065140718065231, 1.307942807209183, 1.309331762518301, 1.3106816163018253, 1.3119930326210636, 1.3132666613728432, 1.3145031386239046, 1.315703086937629, 1.3168671156932437, 1.3179958213976166, 1.3190897879897718, 1.3201495871382591, 1.3211757785315048, 1.322168910161278, 1.3231295185994048, 1.3240581292678655, 1.324955256702404, 1.3258214048097923, 1.3266570671188649, 1.3274627270254795, 1.328238858031512, 1.32898592397803, 1.3297043792727685, 1.3303946691120405, 1.331057229697195, 1.3316924884457655, 1.3323008641974177, 1.3328827674148223, 1.333438600379571, 1.3339687573832537, 1.3344736249138132, 1.3349535818372853, 1.3354089995750424, 1.3358402422766449, 1.336247666988407, 1.3366316238177893, 1.3369924560937076, 1.3373305005228708, 1.337646087342242, 1.337939540467719, 1.3382111776391243, 1.3384613105616094, 1.3386902450435494, 1.338898281131024, 1.339085713238972, 1.3392528302790985, 1.339399915784621, 1.3395272480319314, 1.3396351001592592, 1.3397237402824034, 1.3397934316076132, 1.3398444325416914, 1.339876996799386, 1.3398913735081475, 1.3398878073103084, 1.3398665384627686, 1.3398278029342252, 1.339771832500037, 1.339698854834765, 1.3396090936024567, 1.3395027685447325, 1.3393800955667248, 1.3392412868209358, 1.3390865507890561, 1.338916092361801, 1.338730112916819, 1.338528810394718, 1.3383123793732548, 1.3380810111397439, 1.3378348937617228, 1.3375742121559222, 1.3372991481555825, 1.337009880576165, 1.3367065852794893, 1.3363894352363437, 1.3360586005876085, 1.3357142487039226, 1.3353565442439417, 1.3349856492112127, 1.3346017230097074, 1.3342049224980472, 1.3337954020424483, 1.3333733135684276, 1.3329388066112942, 1.3324920283654582, 1.3320331237325902, 1.3315622353686574, 1.3310795037298617, 1.3305850671175197, 1.3300790617218914, 1.3295616216650046, 1.329032879042484, 1.3284929639644216, 1.327942004595304, 1.327380127193025, 1.3268074561470022, 1.3262241140154276, 1.3256302215616622, 1.3250258977898077, 1.3244112599794662, 1.3237864237197128, 1.3231515029423, 1.3225066099541143, 1.3218518554688974, 1.3211873486382548, 1.3205131970819748, 1.319829506917658, 1.3191363827896927, 1.318433927897582, 1.3177222440236405, 1.3170014315600718, 1.3162715895354544, 1.315532815640633, 1.3147852062540437, 1.31402885646648, 1.3132638601053133, 1.3124903097581841, 1.3117082967961737, 1.3109179113964675, 1.31011924256453, 1.309312378155791, 1.308497404896865, 1.3076744084063103, 1.3068434732149383, 1.3060046827856855, 1.3051581195330582, 1.3043038648421583, 1.3034419990873023, 1.3025726016502401, 1.3016957509379894, 1.300811524400283, 1.299919998546653, 1.299021248963147, 1.298115350328692, 1.2972023764311147, 1.2962824001828197, 1.2953554936361416, 1.2944217279983743, 1.2934811736464837, 1.292533900141513, 1.2915799762426896, 1.2906194699212372, 1.289652448373899, 1.2886789780361811, 1.2876991245953262, 1.2867129530030135, 1.2857205274878003, 1.2847219115673048, 1.283717168060144, 1.2827063590976218, 1.2816895461351812, 1.2806667899636206, 1.2796381507200858, 1.2786036878988338, 1.2775634603617823, 1.2765175263488433, 1.2754659434880495, 1.274408768805475, 1.2733460587349614, 1.2722778691276395, 1.2712042552612703, 1.2701252718493932, 1.2690409730502932, 1.2679514124757902, 1.2668566431998551, 1.2657567177670497, 1.2646516882008065, 1.2635416060115416, 1.262426522204606, 1.2613064872880853, 1.260181551280441, 1.2590517637180072, 1.2579171736623374, 1.2567778297074095, 1.255633779986689, 1.2544850721800564, 1.2533317535206028, 1.2521738708012866, 1.2510114703814705, 1.2498445981933262, 1.2486732997481182, 1.2474976201423684, 1.2463176040639, 1.2451332957977672, 1.2439447392320726, 1.2427519778636722, 1.241555054803773, 1.2403540127834245, 1.2391488941589062, 1.2379397409170134, 1.236726594680243, 1.235509496711882, 1.234288487921002, 1.2330636088673568, 1.2318348997661919, 1.2306024004929632, 1.2293661505879667, 1.228126189260884, 1.22688255539524, 1.2256352875527865, 1.2243844239777926, 1.2231300026012684, 1.2218720610451015, 1.2206106366261231, 1.2193457663600982, 1.2180774869656426, 1.2168058348680677, 1.215530846203159, 1.2142525568208815, 1.212971002289019, 1.2116862178967502, 1.210398238658159, 1.20910709931568, 1.207812834343484, 1.2065154779508007, 1.2052150640851882, 1.2039116264357332, 1.2026051984362054, 1.2012958132681486, 1.199983503863921, 1.1986683029096779, 1.197350242848307, 1.196029355882307, 1.1947056739766178, 1.1933792288614022, 1.1920500520347774, 1.190718174765498, 1.1893836280955954, 1.1880464428429676, 1.1867066496039274, 1.185364278755705, 1.1840193604589084, 1.1826719246599375, 1.1813220010933634, 1.1799696192842626, 1.178614808550511, 1.1772575980050417, 1.1758980165580621, 1.1745360929192337, 1.1731718555998165, 1.1718053329147748, 1.17043655298485, 1.169065543738597, 1.167692332914387, 1.1663169480623774, 1.1649394165464473, 1.1635597655461032, 1.1621780220583504, 1.1607942128995365, 1.1594083647071614, 1.1580205039416598, 1.1566306568881535, 1.155238849658175, 1.153845108191364, 1.1524494582571356, 1.1510519254563196, 1.1496525352227778, 1.1482513128249905, 1.1468482833676201, 1.1454434717930495, 1.1440369028828958, 1.1426286012594982, 1.1412185913873845, 1.1398068975747138, 1.1383935439746942, 1.1369785545869842, 1.135561953259063, 1.1341437636875886, 1.1327240094197277, 1.1313027138544682, 1.1298799002439122, 1.1284555916945467, 1.127029811168496, 1.125602581484753, 1.1241739253203973, 1.1227438652117867, 1.1213124235557355, 1.1198796226106764, 1.1184454844977998, 1.1170100312021805, 1.1155732845738848, 1.1141352663290618, 1.1126959980510212, 1.1112555011912892, 1.1098137970706545, 1.1083709068801966, 1.1069268516822974, 1.1054816524116424, 1.1040353298762038, 1.1025879047582081, 1.1011393976150958, 1.0996898288804613, 1.0982392188649803, 1.0967875877573283, 1.095334955625081, 1.0938813424156044, 1.0924267679569324, 1.0909712519586305, 1.0895148140126507, 1.0880574735941708, 1.086599250062424, 1.0851401626615167, 1.0836802305212372, 1.0822194726578485, 1.0807579079748755, 1.0792955552638785, 1.0778324332052174, 1.076368560368805, 1.0749039552148503, 1.073438636094595, 1.0719726212510332, 1.0705059288196308, 1.0690385768290276, 1.0675705832017346, 1.0661019657548207, 1.0646327422005921, 1.0631629301472614, 1.0616925470996077, 1.0602216104596318, 1.0587501375271986, 1.0572781455006748, 1.055805651477556, 1.0543326724550908, 1.0528592253308902, 1.0513853269035358, 1.0499109938731774, 1.048436242842123, 1.0469610903154256, 1.045485552701457, 1.0440096463124802, 1.042533387365211, 1.0410567919813778, 1.0395798761882686, 1.0381026559192765, 1.0366251470144376, 1.0351473652209624, 1.0336693261937606, 1.032191045495962, 1.030712538599428, 1.029233820885263, 1.0277549076443142, 1.0262758140776678, 1.0247965552971439, 1.0233171463257782, 1.0218376020983082, 1.0203579374616425, 1.018878167175337, 1.0173983059120584, 1.015918368258044, 1.0144383687135596, 1.0129583216933506, 1.0114782415270873, 1.0099981424598088, 1.0085180386523591, 1.0070379441818218, 1.0055578730419488, 1.0040778391435843, 1.0025978563150857, 1.001117938302742, 0.9996380987711827, 0.9981583513037902, 0.9966787094031017, 0.9951991864912113, 0.9937197959101675, 0.992240550922366, 0.9907614647109395, 0.9892825503801445, 0.9878038209557437, 0.986325289385386, 0.9848469685389818, 0.9833688712090762, 0.9818910101112185, 0.9804133978843279, 0.9789360470910569, 0.9774589702181516, 0.9759821796768092, 0.9745056878030303, 0.9730295068579711, 0.9715536490282919, 0.9700781264265014, 0.9686029510913006, 0.9671281349879214, 0.9656536900084643, 0.9641796279722328, 0.9627059606260648, 0.9612326996446631, 0.9597598566309211, 0.9582874431162469, 0.9568154705608873, 0.9553439503542438, 0.9538728938151932, 0.9524023121924003, 0.9509322166646315, 0.9494626183410635, 0.9479935282615942, 0.9465249573971459, 0.9450569166499707, 0.9435894168539524, 0.9421224687749042, 0.9406560831108691, 0.9391902704924133, 0.9377250414829216, 0.9362604065788872, 0.9347963762102035, 0.9333329607404514, 0.931870170467185, 0.9304080156222169, 0.9289465063718991, 0.9274856528174064, 0.9260254649950128, 0.9245659528763713, 0.9231071263687877, 0.9216489953154953, 0.9201915694959286, 0.9187348586259928, 0.9172788723583334, 0.9158236202826043, 0.9143691119257339, 0.9129153567521899, 0.9114623641642429, 0.9100101435022275, 0.9085587040448033, 0.9071080550092148, 0.9056582055515464, 0.9042091647669815, 0.9027609416900566, 0.901313545294914, 0.8998669844955554, 0.8984212681460907, 0.896976405040992, 0.8955324039153372, 0.8940892734450605, 0.8926470222471975, 0.8912056588801299, 0.8897651918438306, 0.888325629580104, 0.886886980472828, 0.8854492528481961, 0.8840124549749554, 0.8825765950646431, 0.8811416812718263, 0.8797077216943364, 0.878274724373504, 0.8768426972943923, 0.8754116483860318, 0.8739815855216502, 0.8725525165189036, 0.8711244491401076, 0.869697391092464, 0.8682713500282913, 0.8668463335452485, 0.8654223491865648, 0.8639994044412612, 0.8625775067443774, 0.8611566634771937, 0.8597368819674536, 0.8583181694895853, 0.8569005332649232, 0.8554839804619262, 0.8540685181963987, 0.8526541535317067, 0.851240893478996, 0.8498287449974093, 0.8484177149943014, 0.8470078103254529, 0.845599037795287, 0.8441914041570796, 0.8427849161131749, 0.8413795803151958, 0.8399754033642545, 0.8385723918111627, 0.8371705521566434, 0.8357698908515366, 0.8343704142970101, 0.8329721288447655, 0.8315750407972439, 0.8301791564078356, 0.8287844818810801, 0.8273910233728766, 0.8259987869906823, 0.8246077787937199, 0.8232180047931777, 0.8218294709524137, 0.820442183187154, 0.819056147365696, 0.8176713693091077, 0.8162878547914263, 0.8149056095398577, 0.8135246392349744, 0.8121449495109124, 0.8107665459555697, 0.8093894341108004, 0.8080136194726126, 0.8066391074913606, 0.8052659035719426, 0.8038940130739923, 0.8025234413120729, 0.8011541935558699, 0.7997862750303829, 0.7984196909161178, 0.7970544463492765, 0.795690546421949, 0.7943279961823018, 0.7929668006347679, 0.7916069647402353, 0.7902484934162355, 0.788891391537131, 0.7875356639343016, 0.7861813153963325, 0.784828350669199, 0.7834767744564525, 0.7821265914194053, 0.7807778061773155, 0.7794304233075705, 0.7780844473458701, 0.7767398827864095, 0.7753967340820622, 0.7740550056445616, 0.7727147018446817, 0.7713758270124186, 0.7700383854371704, 0.7687023813679179, 0.7673678190134021, 0.7660347025423043, 0.7647030360834253, 0.7633728237258605, 0.76204406951918, 0.7607167774736037, 0.7593909515601781, 0.7580665957109527, 0.7567437138191547, 0.7554223097393639, 0.7541023872876876, 0.752783950241934, 0.751467002341786, 0.7501515472889744, 0.7488375887474494, 0.7475251303435536, 0.7462141756661935, 0.7449047282670104, 0.7435967916605503, 0.7422903693244356, 0.7409854646995334, 0.7396820811901254, 0.7383802221640766, 0.737079890953003, 0.7357810908524411, 0.734483825122013, 0.7331880969855953, 0.7318939096314842, 0.7306012662125626, 0.7293101698464648, 0.7280206236157422, 0.7267326305680273, 0.7254461937161988, 0.7241613160385446, 0.7228780004789254, 0.7215962499469379, 0.7203160673180765, 0.7190374554338951, 0.7177604171021704, 0.7164849550970611, 0.7152110721592687, 0.7139387709961984, 0.712668054282119, 0.7113989246583214, 0.7101313847332777, 0.7088654370827996, 0.7076010842501971, 0.706338328746435, 0.7050771730502908, 0.7038176196085102, 0.7025596708359648, 0.7013033291158073, 0.7000485967996263, 0.6987954762076013, 0.6975439696286584, 0.6962940793206233, 0.6950458075103741, 0.6937991563939966, 0.6925541281369348, 0.6913107248741454, 0.690068948710247, 0.6888288017196744, 0.6875902859468277, 0.686353403406223, 0.6851181560826431, 0.6838845459312879, 0.6826525748779213, 0.6814222448190227, 0.6801935576219335, 0.6789665151250062, 0.6777411191377517, 0.6765173714409858, 0.6752952737869764, 0.6740748278995903, 0.6728560354744378, 0.6716388981790188, 0.6704234176528681, 0.6692095955076992, 0.6679974333275492, 0.6667869326689219, 0.6655780950609306, 0.6643709220054421, 0.6631654149772191, 0.6619615754240606, 0.6607594047669453, 0.6595589044001714, 0.6583600756914983, 0.6571629199822858, 0.6559674385876352, 0.6547736327965278, 0.6535815038719641, 0.6523910530511023, 0.6512022815453974, 0.650015190540737, 0.6488297811975806, 0.6476460546510954, 0.6464640120112924, 0.6452836543631638, 0.6441049827668174, 0.6429279982576126, 0.6417527018462941, 0.6405790945191268, 0.6394071772380305, 0.6382369509407122, 0.6370684165408, 0.6359015749279746, 0.6347364269681034, 0.6335729735033704, 0.6324112153524087, 0.6312511533104315, 0.6300927881493613, 0.6289361206179621, 0.6277811514419671, 0.6266278813242101, 0.6254763109447518, 0.6243264409610102, 0.6231782720078883, 0.6220318046979011, 0.6208870396213024, 0.6197439773462134, 0.6186026184187474, 0.6174629633631359, 0.6163250126818545, 0.6151887668557482, 0.6140542263441554, 0.6129213915850327, 0.6117902629950784, 0.610660840969856, 0.6095331258839175, 0.6084071180909253, 0.6072828179237749, 0.6061602256947167, 0.6050393416954772, 0.6039201661973795, 0.6028026994514645, 0.6016869416886105, 0.6005728931196529, 0.5994605539355038, 0.5983499243072707, 0.5972410043863747, 0.5961337943046686, 0.5950282941745547, 0.5939245040891018, 0.5928224241221619, 0.591722054328487, 0.5906233947438444, 0.5895264453851328, 0.5884312062504974, 0.5873376773194441, 0.5862458585529541, 0.5851557498935982, 0.5840673512656497, 0.5829806625751978, 0.58189568371026, 0.580812414540895, 0.5797308549193134, 0.5786510046799904, 0.5775728636397761, 0.5764964315980061, 0.5754217083366125, 0.5743486936202326, 0.5732773871963188, 0.5722077887952481, 0.5711398981304299, 0.570073714898415, 0.5690092387790026, 0.5679464694353478, 0.5668854065140694, 0.5658260496453555, 0.5647683984430706, 0.5637124525048599, 0.562658211412257, 0.561605674730786, 0.5605548420100686, 0.5595057127839274, 0.5584582865704886, 0.5574125628722872, 0.5563685411763688, 0.5553262209543922, 0.5542856016627324, 0.5532466827425814, 0.5522094636200502, 0.5511739437062696, 0.5501401223974908, 0.5491079990751858, 0.5480775731061468, 0.5470488438425858, 0.5460218106222341, 0.54499647276844, 0.5439728295902679, 0.5429508803825954, 0.5419306244262116, 0.5409120609879132, 0.5398951893206022, 0.5388800086633813, 0.53786651824165, 0.5368547172672006, 0.5358446049383129, 0.5348361804398487, 0.5338294429433472, 0.5328243916071174, 0.5318210255763329, 0.5308193439831244, 0.5298193459466732, 0.5288210305733032, 0.5278243969565725, 0.5268294441773657, 0.5258361713039852, 0.524844577392242, 0.5238546614855458, 0.5228664226149956, 0.5218798597994692, 0.5208949720457128, 0.51991175834843, 0.5189302176903702, 0.517950349042417, 0.5169721513636761, 0.515995623601563, 0.5150207646918897, 0.5140475735589514, 0.5130760491156136, 0.5121061902633972, 0.5111379958925654, 0.5101714648822073, 0.5092065961003245, 0.5082433884039137, 0.5072818406390531, 0.5063219516409848, 0.5053637202341982, 0.5044071452325136, 0.5034522254391646, 0.5024989596468805, 0.5015473466379686, 0.5005973851843952, 0.49964907404786746, 0.4987024119799135, 0.49775739772196403, 0.49681403000543145, 0.49587230755179007, 0.4949322290726562, 0.49399379326986603, 0.4930569988355556, 0.4921218444522378, 0.4911883287928818, 0.49025645052098993, 0.4893262082906752, 0.488397600746738, 0.48747062652474316, 0.48654528425109617, 0.4856215725431185, 0.484699490009124, 0.4837790352484934, 0.48286020685175, 0.4819430034006331, 0.4810274234681729, 0.48011346561876456, 0.4792011284082409, 0.478290410383946, 0.4773813100848085, 0.47647382604141303, 0.47556795677607266, 0.4746637008029013, 0.4737610566278846, 0.4728600227489511, 0.4719605976560428, 0.4710627798311863, 0.47016656774856197, 0.4692719598745741, 0.46837895466792095, 0.4674875505796626, 0.46659774605329096, 0.4657095395247971, 0.4648229294227403, 0.46393791416831487, 0.46305449217541855, 0.462172661850719, 0.4612924215937203, 0.46041376979683074, 0.45953670484542736, 0.4586612251179226, 0.45778732898582974, 0.4569150148138279, 0.45604428095982685, 0.4551751257750318, 0.4543075476040074, 0.45344154478474125, 0.45257711564870834, 0.4517142585209336, 0.450852971720055, 0.4499932535583861, 0.4491351023419787, 0.4482785163706844, 0.44742349393821634, 0.44657003333221085, 0.4457181328342883, 0.4448677907201135, 0.44401900525945714, 0.4431717747162545, 0.4423260973486667, 0.44148197140913914, 0.44063939514446115, 0.4397983667958247, 0.43895888459888377, 0.438120946783811, 0.4372845515753576, 0.4364496971929097, 0.4356163818505464, 0.4347846037570964, 0.433954361116195, 0.4331256521263411, 0.43229847498095236, 0.4314728278684223, 0.43064870897217483, 0.42982611647072033, 0.4290050485377103, 0.42818550334199235, 0.4273674790476642, 0.4265509738141283, 0.42573598579614574, 0.42492251314388946, 0.4241105540029977, 0.4233001065146271, 0.42249116881550525, 0.4216837390379836, 0.4208778153100887, 0.42007339575557534, 0.4192704784939767, 0.41846906164065695, 0.41766914330686167, 0.4168707215997687, 0.4160737946225384, 0.41527836047436406, 0.4144844172505226, 0.4136919630424228, 0.41290099593765506, 0.4121115140200414, 0.4113235153696841, 0.4105369980630125, 0.4097519601728343, 0.40896839976838056, 0.4081863149153562, 0.40740570367598516, 0.4066265641090589, 0.40584889426998355, 0.4050726922108257, 0.4042979559803595, 0.4035246836241126, 0.40275287318441233, 0.4019825227004309, 0.4012136302082311, 0.4004461937408114, 0.399680211328151, 0.398915680997254, 0.39815260077219417, 0.3973909686741589, 0.39663078272149316, 0.39587204092974293, 0.39511474131169877, 0.3943588818774389, 0.3936044606343716, 0.39285147558727884, 0.3920999247383575, 0.39134980608726205, 0.3906011176311464, 0.3898538573647056, 0.3891080232802168, 0.388363613367581, 0.3876206256143633, 0.38687905800583416, 0.38613890852500926, 0.38540017515268976, 0.384662855867503, 0.3839269486459408, 0.38319245146240016, 0.382459362289222, 0.38172767909673, 0.3809973998532695, 0.38026852252524623, 0.37954104507716396, 0.3788149654716633, 0.3780902816695592, 0.37736699162987836, 0.37664509330989693, 0.3759245846651774, 0.37520546364960555, 0.37448772821542725, 0.3737713763132848, 0.37305640589225336, 0.37234281489987664, 0.3716306012822028, 0.3709197629838203, 0.3702102979478929, 0.3695022041161948, 0.36879547942914603, 0.3680901218258462, 0.3673861292441101, 0.3666834996205008, 0.36598223089036513, 0.36528232098786567, 0.36458376784601626, 0.3638865693967138, 0.36319072357077276, 0.36249622829795697, 0.3618030815070133, 0.36111128112570384, 0.3604208250808382, 0.35973171129830583, 0.3590439377031081, 0.35835750221938917, 0.3576724027704688, 0.3569886372788727, 0.3563062036663642, 0.35562509985397484, 0.35494532376203497, 0.3542668733102052, 0.35358974641750507, 0.3529139410023452, 0.352239454982555, 0.35156628627541453, 0.3508944327976824, 0.35022389246562613, 0.34955466319505063, 0.3488867429013275, 0.34822012949942377, 0.3475548209039303, 0.3468908150290905, 0.3462281097888278, 0.3455667030967747, 0.3449065928662995, 0.3442477770105345, 0.3435902534424034, 0.34293402007464857, 0.342279074819858, 0.34162541559049175, 0.3409730402989099, 0.34032194685739725, 0.3396721331781916, 0.3390235971735084, 0.3383763367555671, 0.3377303498366176, 0.3370856343289651, 0.33644218814499566, 0.33580000919720177, 0.33515909539820693, 0.3345194446607913, 0.3338810548979158, 0.3332439240227467, 0.3326080499486803, 0.3319734305893671, 0.3313400638587353, 0.33070794767101575, 0.3300770799407646, 0.329447458582887, 0.32881908151266137, 0.3281919466457614, 0.32756605189827975, 0.32694139518675075, 0.32631797442817323, 0.32569578754003276, 0.3250748324403242, 0.32445510704757424, 0.32383660928086244, 0.32321933705984474, 0.32260328830477325, 0.3219884609365195, 0.32137485287659473, 0.32076246204717185, 0.3201512863711061, 0.31954132377195615, 0.3189325721740048, 0.3183250295022796, 0.3177186936825737, 0.3171135626414654, 0.3165096343063391, 0.3159069066054049, 0.3153053774677183, 0.3147050448232004, 0.3141059066026572, 0.3135079607377989, 0.31291120516125936, 0.31231563780661503, 0.3117212566084041, 0.3111280595021454, 0.3105360444243565, 0.30994520931257324, 0.309355552105367, 0.308767070742364, 0.3081797631642623, 0.3075936273128511, 0.30700866113102726, 0.30642486256281354, 0.3058422295533765, 0.3052607600490433, 0.3046804519973192, 0.30410130334690477, 0.30352331204771293, 0.30294647605088537, 0.3023707933088098, 0.3017962617751361, 0.3012228794047932, 0.3006506441540051, 0.300079553980307, 0.2995096068425616, 0.2989408007009748, 0.2983731335171117, 0.2978066032539121, 0.2972412078757059, 0.29667694534822875, 0.29611381363863737, 0.2955518107155244, 0.2949909345489337, 0.29443118311037486, 0.2938725543728387, 0.293315046310811, 0.2927586569002877, 0.2922033841187887, 0.291649225945373, 0.2910961803606521, 0.29054424534680406, 0.28999341888758784, 0.28944369896835676, 0.2888950835760724, 0.2883475706993178, 0.2878011583283113, 0.28725584445491936, 0.2867116270726705, 0.28616850417676737, 0.2856264737641007, 0.28508553383326174, 0.2845456823845545, 0.2840069174200093, 0.28346923694339465, 0.2829326389602298, 0.28239712147779705, 0.28186268250515395, 0.2813293200531452, 0.28079703213441465, 0.2802658167634177, 0.27973567195643184, 0.2792065957315693, 0.27867858610878826, 0.2781516411099041, 0.27762575875860085, 0.2771009370804423, 0.27657717410288346, 0.2760544678552807, 0.2755328163689037, 0.2750122176769452, 0.27449266981453235, 0.27397417081873726, 0.2734567187285868, 0.2729403115850741, 0.2724249474311675, 0.27191062431182206, 0.2713973402739884, 0.27088509336662325, 0.27037388164069964, 0.2698637031492159, 0.2693545559472062, 0.2688464380917491, 0.2683393476419779, 0.2678332826590898, 0.2673282412063549, 0.26682422134912565, 0.2663212211548457, 0.26581923869305946, 0.2653182720354204, 0.2648183192557001, 0.2643193784297969, 0.2638214476357449, 0.26332452495372194, 0.2628286084660583, 0.26233369625724534, 0.26183978641394334, 0.2613468770249897, 0.2608549661814076, 0.2603640519764132, 0.25987413250542424, 0.2593852058660675, 0.2588972701581864, 0.25841032348384935, 0.25792436394735657, 0.25743938965524776, 0.25695539871631007, 0.2564723892415845, 0.2559903593443739, 0.25550930714024983, 0.2550292307470594, 0.25455012828493284, 0.25407199787628976, 0.25359483764584645, 0.2531186457206224, 0.2526434202299471, 0.25216915930546663, 0.2516958610811497, 0.25122352369329504, 0.25075214528053674, 0.25028172398385107, 0.24981225794656284, 0.2493437453143509, 0.24887618423525468, 0.24840957285968018, 0.2479439093404055, 0.24747919183258685, 0.24701541849376446, 0.2465525874838679, 0.24609069696522198, 0.24562974510255234, 0.24516973006299037, 0.2447106500160792, 0.24425250313377844, 0.24379528759047017, 0.2433390015629634, 0.2428836432304993, 0.24242921077475657, 0.24197570237985605, 0.24152311623236572, 0.24107145052130563, 0.2406207034381524, 0.24017087317684413, 0.23972195793378484, 0.23927395590784914, 0.23882686530038671, 0.23838068431522663, 0.23793541115868164, 0.2374910440395528, 0.2370475811691333, 0.23660502076121287, 0.2361633610320815, 0.23572260020053415, 0.23528273648787393, 0.2348437681179166, 0.23440569331699404, 0.23396851031395827, 0.23353221734018484, 0.23309681262957702, 0.23266229441856875, 0.23222866094612868, 0.2317959104537634, 0.23136404118552084, 0.23093305138799364, 0.23050293931032265, 0.23007370320419987, 0.22964534132387177, 0.2292178519261423, 0.2287912332703763, 0.22836548361850187, 0.22794060123501414, 0.22751658438697722, 0.22709343134402782, 0.22667114037837774, 0.22624970976481643, 0.225829137780714, 0.2254094227060235, 0.2249905628232837, 0.22457255641762158, 0.22415540177675455, 0.22373909719099333, 0.22332364095324372, 0.22290903135900933, 0.2224952667063937, 0.22208234529610224, 0.22167026543144497, 0.22125902541833786, 0.22084862356530552, 0.2204390581834828, 0.22003032758661678, 0.21962243009106897, 0.2192153640158166, 0.21880912768245497, 0.21840371941519882, 0.21799913754088407, 0.2175953803889697, 0.21719244629153925, 0.216790333583302, 0.21638904060159525, 0.21598856568638494, 0.21558890718026763, 0.21519006342847163, 0.2147920327788584, 0.21439481358192386, 0.2139984041907994, 0.21360280296125347, 0.21320800825169225, 0.2128140184231612, 0.21242083183934568, 0.2120284468665724, 0.21163686187380998, 0.21124607523267022, 0.21085608531740863, 0.21046689050492579, 0.2100784891747675, 0.20969087970912614, 0.20930406049284078, 0.20891802991339853, 0.20853278636093478, 0.20814832822823354, 0.20776465391072865, 0.2073817618065039, 0.2069996503162933, 0.20661831784348214, 0.2062377627941067, 0.2058579835768551, 0.20547897860306732, 0.20510074628673572, 0.20472328504450518, 0.20434659329567315, 0.20397066946219009, 0.2035955119686595, 0.20322111924233782, 0.2028474897131349, 0.20247462181361367, 0.20210251397899015, 0.20173116464713353, 0.20136057225856627, 0.2009907352564635, 0.20062165208665309, 0.2002533211976159, 0.19988574104048473, 0.19951891006904462, 0.19915282673973247, 0.19878748951163666, 0.19842289684649678, 0.19805904720870293, 0.1976959390652959, 0.19733357088596584, 0.19697194114305283, 0.19661104831154547, 0.19625089086908076, 0.1958914672959433, 0.1955327760750652, 0.1951748156920245, 0.19481758463504537, 0.19446108139499707, 0.19410530446539298, 0.19375025234239018, 0.19339592352478865, 0.19304231651403012, 0.19268942981419754, 0.19233726193201406, 0.19198581137684206, 0.19163507666068236, 0.1912850562981731, 0.19093574880658887, 0.19058715270583954, 0.1902392665184694, 0.18989208876965574, 0.1895456179872082, 0.18919985270156725, 0.18885479144580328, 0.18851043275561516, 0.1881667751693292, 0.187823817227898, 0.18748155747489884, 0.18713999445653273, 0.1867991267216229, 0.18645895282161354, 0.18611947131056833, 0.18578068074516935, 0.18544257968471495, 0.18510516669111915, 0.18476844032890968, 0.18443239916522666, 0.18409704176982095, 0.18376236671505264, 0.1834283725758896, 0.1830950579299057, 0.18276242135727966, 0.18243046144079256, 0.1820991767658271, 0.18176856592036525, 0.181438627494987, 0.1811093600828684, 0.1807807622797797, 0.18045283268408407, 0.18012556989673512, 0.1797989725212757, 0.17947303916383572, 0.17914776843313046, 0.17882315894045853, 0.1784992092997002, 0.1781759181273154, 0.1778532840423415, 0.1775313056663919, 0.17720998162365348, 0.1768893105408853, 0.17656929104741567, 0.176249921775141, 0.17593120135852316, 0.17561312843458768, 0.17529570164292163, 0.17497891962567144, 0.17466278102754076, 0.1743472844957885, 0.17403242868022636, 0.17371821223321696, 0.17340463380967128, 0.17309169206704692, 0.1727793856653454, 0.17246771326711022, 0.1721566735374245, 0.1718462651439085, 0.17153648675671776, 0.17122733704854018, 0.17091881469459433, 0.17061091837262654, 0.17030364676290893, 0.16999699854823677, 0.16969097241392628, 0.16938556704781185, 0.16908078114024425, 0.16877661338408748, 0.16847306247471672, 0.16817012711001583, 0.16786780599037474, 0.16756609781868695, 0.16726500130034705, 0.1669645151432482, 0.16666463805777945, 0.16636536875682362, 0.16606670595575387, 0.16576864837243202, 0.16547119472720534, 0.16517434374290418, 0.1648780941448393, 0.16458244466079924, 0.16428739402104747, 0.16399294095832007, 0.1636990842078227, 0.16340582250722807, 0.16311315459667322, 0.1628210792187568, 0.16252959511853626, 0.16223870104352514, 0.16194839574369044, 0.16165867797144956, 0.16136954648166768, 0.16108100003165507, 0.1607930373811642, 0.16050565729238672, 0.1602188585299509, 0.15993263986091874, 0.1596470000547829, 0.15936193788346423, 0.1590774521213083, 0.15879354154508327, 0.15851020493397636, 0.15822744106959127, 0.1579452487359451, 0.15766362671946552, 0.1573825738089878, 0.157102088795752, 0.15682217047339966, 0.15654281763797112, 0.15626402908790252, 0.15598580362402278, 0.1557081400495505, 0.15543103717009119, 0.15515449379363383, 0.15487850873054848, 0.1546030807935826, 0.15432820879785847, 0.15405389156086988, 0.1537801279024792, 0.15350691664491425, 0.15323425661276532, 0.15296214663298188, 0.1526905855348697, 0.15241957215008767, 0.15214910531264464, 0.15187918385889654, 0.15160980662754273, 0.15134097245962355, 0.1510726801985166, 0.15080492868993395, 0.15053771678191882, 0.15027104332484262, 0.1500049071714013, 0.14973930717661288, 0.14947424219781366, 0.14920971109465522, 0.14894571272910156, 0.1486822459654253, 0.14841930967020495, 0.14815690271232138, 0.14789502396295487, 0.1476336722955817, 0.147372846585971, 0.14711254571218135, 0.14685276855455787, 0.14659351399572865, 0.14633478092060143, 0.1460765682163608, 0.14581887477246455, 0.14556169948064043, 0.14530504123488283, 0.14504889893144976, 0.14479327146885937, 0.1445381577478866, 0.14428355667156, 0.14402946714515824, 0.1437758880762072, 0.14352281837447614, 0.1432702569519747, 0.14301820272294968, 0.14276665460388124, 0.14251561151348008, 0.14226507237268377, 0.14201503610465357, 0.141765501634771, 0.14151646789063457, 0.14126793380205635, 0.14101989830105868, 0.14077236032187057, 0.14052531880092484, 0.14027877267685415, 0.14003272089048815, 0.13978716238484967, 0.1395420961051517, 0.1392975209987937, 0.13905343601535844, 0.13880984010660843, 0.13856673222648272, 0.1383241113310934, 0.13808197637872208, 0.1378403263298167, 0.13759916014698792, 0.13735847679500598, 0.13711827524079706, 0.13687855445343974, 0.1366393134041621, 0.13640055106633772, 0.1361622664154826, 0.13592445842925166, 0.1356871260874352, 0.13545026837195565, 0.13521388426686404, 0.13497797275833656, 0.13474253283467114, 0.13450756348628398, 0.1342730637057062, 0.13403903248758028, 0.13380546882865677, 0.13357237172779063, 0.13333974018593794, 0.13310757320615246, 0.13287586979358204, 0.13264462895546536, 0.1324138497011282, 0.1321835310419804, 0.131953671991512, 0.1317242715652899, 0.13149532878095455, 0.13126684265821636, 0.13103881221885225, 0.13081123648670212, 0.13058411448766555, 0.13035744524969825, 0.13013122780280856, 0.12990546117905405, 0.12968014441253792, 0.1294552765394057, 0.12923085659784178, 0.1290068836280657, 0.12878335667232904, 0.1285602747749116, 0.12833763698211825, 0.12811544234227518, 0.1278936899057265, 0.12767237872483106, 0.12745150785395837, 0.12723107634948588, 0.12701108326979482, 0.1267915276752672, 0.12657240862828206, 0.12635372519321214, 0.12613547643642045, 0.12591766142625663, 0.1257002792330535, 0.12548332892912376, 0.12526680958875644, 0.12505072028821335, 0.12483506010572558, 0.12461982812149026, 0.12440502341766682, 0.12419064507837366, 0.12397669218968478, 0.12376316383962595, 0.12355005911817175, 0.12333737711724171, 0.12312511693069693, 0.12291327765433666, 0.122701858385895, 0.12249085822503697, 0.12228027627335557, 0.12207011163436805, 0.12186036341351243, 0.1216510307181442, 0.12144211265753264, 0.1212336083428575, 0.12102551688720557, 0.12081783740556724, 0.12061056901483272, 0.1204037108337892, 0.12019726198311687, 0.11999122158538561, 0.11978558876505163, 0.11958036264845395, 0.11937554236381107, 0.11917112704121724, 0.11896711581263943, 0.11876350781191353, 0.11856030217474095, 0.11835749803868552, 0.11815509454316961, 0.11795309082947099, 0.11775148604071921, 0.11755027932189237, 0.1173494698198135, 0.11714905668314728, 0.11694903906239638, 0.11674941610989843, 0.11655018697982218, 0.11635135082816439, 0.11615290681274615, 0.11595485409320977, 0.11575719183101509, 0.11555991918943623, 0.115363035333558, 0.11516653943027283, 0.114970430648277, 0.1147747081580674, 0.11457937113193818, 0.11438441874397721, 0.11418985017006295, 0.11399566458786053, 0.11380186117681906, 0.11360843911816766, 0.11341539759491237, 0.11322273579183266, 0.11303045289547808, 0.1128385480941649, 0.1126470205779727, 0.11245586953874101, 0.11226509417006594, 0.11207469366729682, 0.11188466722753276, 0.11169501404961939, 0.11150573333414547, 0.11131682428343952, 0.11112828610156646, 0.11094011799432424, 0.1107523191692405, 0.11056488883556932, 0.11037782620428771, 0.11019113048809238, 0.11000480090139644, 0.10981883666032584, 0.10963323698271635, 0.10944800108811002, 0.10926312819775189, 0.10907861753458681, 0.10889446832325575, 0.10871067979009306, 0.10852725116312262, 0.10834418167205473, 0.10816147054828291, 0.10797911702488049, 0.10779712033659726, 0.10761547971985626, 0.10743419441275047, 0.10725326365503952, 0.10707268668814636, 0.10689246275515402, 0.10671259110080228, 0.10653307097148443, 0.10635390161524412, 0.10617508228177178, 0.10599661222240161, 0.10581849069010829, 0.10564071693950357, 0.10546329022683322, 0.10528620980997352, 0.10510947494842837, 0.1049330849033256, 0.10475703893741421, 0.10458133631506061, 0.10440597630224592, 0.10423095816656222, 0.10405628117720976, 0.1038819446049935, 0.10370794772231988, 0.10353428980319375, 0.10336097012321499, 0.10318798795957541, 0.10301534259105553, 0.10284303329802129, 0.102671059362421, 0.102499420067782, 0.10232811469920758, 0.10215714254337371, 0.10198650288852591, 0.10181619502447603, 0.10164621824259909, 0.10147657183583018, 0.10130725509866116, 0.10113826732713754, 0.10096960781885536, 0.10080127587295809, 0.10063327079013329, 0.10046559187260963, 0.10029823842415365, 0.10013120975006673, 0.09996450515718174, 0.09979812395386016, 0.0996320654499889, 0.09946632895697691, 0.09930091378775238, 0.09913581925675954, 0.0989710446799555, 0.09880658937480705, 0.09864245266028779, 0.09847863385687478, 0.0983151322865457, 0.09815194727277549, 0.0979890781405335, 0.09782652421628019, 0.09766428482796427, 0.09750235930501944, 0.09734074697836141, 0.0971794471803848, 0.09701845924496019, 0.09685778250743084, 0.0966974163046098, 0.09653735997477679, 0.0963776128576753, 0.09621817429450928, 0.09605904362794039, 0.09590022020208466, 0.09574170336250985, 0.09558349245623206, 0.09542558683171287, 0.09526798583885629, 0.09511068882900589, 0.09495369515494156, 0.09479700417087668, 0.0946406152324549, 0.09448452769674758, 0.09432874092225028, 0.09417325426888018, 0.09401806709797284, 0.09386317877227933, 0.09370858865596333, 0.09355429611459798, 0.09340030051516303, 0.09324660122604196, 0.09309319761701884, 0.09294008905927549, 0.09278727492538849, 0.09263475458932635, 0.09248252742644637, 0.09233059281349196, 0.09217895012858941, 0.09202759875124528, 0.09187653806234326, 0.09172576744414133, 0.09157528628026884, 0.09142509395572362, 0.09127518985686907, 0.09112557337143128, 0.09097624388849608, 0.09082720079850622, 0.09067844349325842, 0.0905299713659006, 0.09038178381092887, 0.09023388022418473, 0.09008626000285223, 0.089938922545455, 0.08979186725185365, 0.0896450935232425, 0.08949860076214715, 0.08935238837242136, 0.08920645575924441, 0.08906080232911805, 0.08891542748986388, 0.08877033065062037, 0.08862551122184016, 0.08848096861528716, 0.08833670224403374, 0.08819271152245804, 0.08804899586624099, 0.08790555469236361, 0.08776238741910426, 0.08761949346603581, 0.08747687225402276, 0.08733452320521864, 0.08719244574306315, 0.08705063929227928, 0.0869091032788708, 0.08676783713011925, 0.08662684027458133, 0.08648611214208606, 0.08634565216373218, 0.08620545977188517, 0.08606553440017474, 0.08592587548349204, 0.08578648245798683, 0.08564735476106483, 0.08550849183138505, 0.08536989310885698, 0.08523155803463794, 0.08509348605113036, 0.08495567660197909, 0.0848181291320687, 0.08468084308752073, 0.08454381791569116, 0.08440705306516755, 0.08427054798576644, 0.08413430212853074, 0.08399831494572689, 0.08386258589084243, 0.08372711441858317, 0.08359189998487056, 0.08345694204683911, 0.08332224006283363, 0.08318779349240679, 0.08305360179631623, 0.08291966443652211, 0.08278598087618447, 0.08265255057966049, 0.08251937301250202, 0.08238644764145285, 0.08225377393444619, 0.08212135136060204, 0.08198917939022457, 0.08185725749479955, 0.08172558514699169, 0.08159416182064223, 0.08146298699076619, 0.08133206013354984, 0.08120138072634814, 0.08107094824768224, 0.08094076217723681, 0.08081082199585753, 0.08068112718554857, 0.08055167722946999, 0.08042247161193525, 0.0802935098184086, 0.08016479133550265, 0.08003631565097576, 0.07990808225372949, 0.0797800906338062, 0.07965234028238648, 0.07952483069178651, 0.07939756135545582, 0.07927053176797454, 0.07914374142505105, 0.07901718982351945, 0.07889087646133704, 0.07876480083758189, 0.07863896245245032, 0.07851336080725443, 0.07838799540441972, 0.0782628657474825, 0.07813797134108746, 0.07801331169098531, 0.07788888630403021, 0.07776469468817741, 0.07764073635248075, 0.07751701080709024, 0.07739351756324972, 0.07727025613329423, 0.07714722603064784, 0.07702442676982095, 0.0769018578664082, 0.07677951883708577, 0.07665740919960914, 0.07653552847281066, 0.07641387617659715, 0.07629245183194741, 0.0761712549609101, 0.07605028508660103, 0.07592954173320104, 0.0758090244259535, 0.07568873269116193, 0.07556866605618776, 0.0754488240494478, 0.07532920620041214, 0.07520981203960142, 0.07509064109858488, 0.07497169290997775, 0.0748529670074391, 0.07473446292566929, 0.07461618020040792, 0.07449811836843123, 0.07438027696755005, 0.07426265553660717, 0.07414525361547544, 0.07402807074505505, 0.07391110646727152, 0.07379436032507328, 0.07367783186242936, 0.07356152062432726, 0.07344542615677048, 0.07332954800677635, 0.07321388572237368, 0.07309843885260063, 0.0729832069475023, 0.07286818955812854, 0.07275338623653171, 0.07263879653576436, 0.0725244200098771, 0.07241025621391622, 0.07229630470392161, 0.07218256503692433, 0.0720690367709446, 0.07195571946498945, 0.07184261267905048, 0.07172971597410172, 0.07161702891209737, 0.07150455105596965, 0.07139228196962658, 0.07128022121794965, 0.07116836836679188, 0.07105672298297547, 0.07094528463428958, 0.07083405288948826, 0.07072302731828825, 0.07061220749136676, 0.07050159298035935, 0.07039118335785777, 0.07028097819740771, 0.07017097707350682, 0.07006117956160249, 0.06995158523808952, 0.06984219368030829, 0.06973300446654246, 0.06962401717601682, 0.0695152313888952, 0.06940664668627843, 0.06929826265020196, 0.06919007886363415, 0.06908209491047379, 0.06897431037554824, 0.06886672484461111, 0.06875933790434044, 0.06865214914233635, 0.06854515814711908, 0.06843836450812689, 0.06833176781571401, 0.06822536766114849, 0.0681191636366102, 0.06801315533518872, 0.06790734235088126, 0.06780172427859074, 0.06769630071412353, 0.06759107125418753, 0.06748603549639014, 0.06738119303923613, 0.06727654348212568, 0.06717208642535233, 0.0670678214701009, 0.06696374821844554, 0.06685986627334771, 0.06675617523865407];
navigator.mediaDevices.getUserMedia({
		audio: true
	})
	.then(function(mediaStream) {
		var audioContext = new(window.AudioContext || window.webkitAudioContext)({
			sampleRate: 48000
		});
		audioContext.sampleRate = 48000;
		document.getElementById("myDiv").innerText = audioContext.sampleRate;
		document.getElementById("t2").innerText = "QQQQQQQQQQ";

		// Create a source from our MediaStream
		var source = audioContext.createMediaStreamSource(mediaStream);
		// Now create a Javascript processing node with the following parameters:
		// 4096 = bufferSize (See notes below)
		// 2 = numberOfInputChannels (i.e. Stereo input)
		// 2 = numberOfOutputChannels (i.e. Stereo output)
		var node = audioContext.createScriptProcessor(4096, 1, 1);
		var fft = new FFT(4096, 48000);
		var cnt = 0;
		var firstTime = Date.now();
		node.onaudioprocess = function(data) {
			var array = new Float32Array(analyser.frequencyBinCount);
			// console.log(analyser.frequencyBinCount);
			analyser.getFloatFrequencyData(array);
			var values = 0;
			var fvalues = 0;
			var length = array.length;
			var farray = data.inputBuffer.getChannelData(0);


			fft.forward(farray);
			var spectrum = fft.spectrum;

			for (var i = 10; i < spectrum.length; i++) {
				// values += Math.pow(10, array[i] / 10 / 255);
				// values += Math.pow((array[i]-128) / 127, 2);
				// values += array[i]/255;
				values += Math.pow(spectrum[i] * Aweighting[i], 2);
				// if(i === spectrum.length-1) console.log(555555);
			}
			dBA.push(10 * Math.log10(values * 2500000000.0));
			// console.log(dBA);
			if(dBA.length == 21094){
				node.disconnect(audioContext.destination);
				console.log("finish");
				console.log(dBA);
				document.getElementById("myDiv").innerText = "finish";
				document.getElementById("t2").innerText = Math.floor((Date.now()-firstTime)/1000);
				document.getElementById("data").innerText = dBA;
				upLoadData(dBA);
			} else if(dBA.length % 703 == 0){
				document.getElementById("myDiv").innerText = dBA.length;
				document.getElementById("t2").innerText = Math.floor((Date.now()-firstTime)/1000);
			}
			// values /= spectrum.length;
			// var average = Math.sqrt(values / length);
			// values = Math.pow(values, 2);
			// values = 20 * Math.log10(values) +94;
			// console.log('FFT  ' + String(10 * Math.log10(values * 2500000000.0)));

			// for (var i = 0; i < 4096; i++) {
			// 	var value = Math.sqrt(fft.real[i] * fft.real[i] + fft.imag[i] * fft.imag[i]);
			// 	values += Math.pow(value/2048, 2);
			// }
			// values /= (2048 * 16);
			// console.log('FFT  ' + String(10 * Math.log10(values * 2500000000.0)));
			// console.log(fft.imag);
			// console.log(fft.real);
			// console.log(values);
			// console.log(spectrum);
			// console.log(array);
			// console.log(farray);

			// console.log(4096 >> 1);



			// for (var i = 0; i < farray.length; i++) {
			// 	fvalues += (farray[i]) * (farray[i]);
			// }
			// var faverage = Math.sqrt(fvalues / farray.length);
			// console.log(20 * Math.log10(faverage * 50000.0));
			// console.log(farray);

			// console.log(10 * Math.log10(values* 10)- 10 * Math.log10(faverage * 2500000000.0));
			// console.log(faverage);
			// console.log(data.inputBuffer.sampleRate);
			// node.disconnect(audioContext.destination);
			// var interval = setInterval(function() {
			
			// 	Plotly.extendTraces('myDiv', {
			// 		y: [
			// 			[10 * Math.log10(values * 2500000000.0)],
			// 			[20 * Math.log10(faverage * 50000.0)]
			// 		]
			// 	}, [0, 1])
			
			// 	if (++cnt == 1024) clearInterval(interval);
			// }, 1);
		}
		/////
		// console.log(data.inputBuffer.getChannelData(0).buffer);
		// Connect the microphone to the script processor
		// source.connect(node);

		var analyser = audioContext.createAnalyser();
		source.connect(analyser);
		analyser.connect(node);
		node.connect(audioContext.destination);
		// var buffer = new Uint8Array(an.fftSize);
		analyser.fftSize = 4096;
		analyser.smoothingTimeConstant = 0;
		// analyser.maxDecibels = 120;
		// analyser.minDecibels = 0;

		// function f() {
		// 	/* note that getFloatTimeDomainData will be available in the near future,
		// 	 * if needed. */
		// 	an.getByteTimeDomainData(buffer);
		// 	/* RMS stands for Root Mean Square, basically the root square of the
		// 	 * average of the square of each value. */
		// 	var rms = 0;
		// 	for (var i = 0; i < buffer.length; i++) {
		// 		rms += buffer[i] * buffer[i];
		// 	}
		// 	rms /= buffer.length;
		// 	rms = Math.sqrt(rms);
		// 	console.log(rms);
		// 	/* rms now has the value we want. */
		// 	requestAnimationFrame(f);
		// }

		// requestAnimationFrame(f);

		// node.onaudioprocess = function(data) {
		//     var leftChannel = data.inputBuffer.getChannelData(0).buffer;
		//     var rightChannel = data.inputBuffer.getChannelData(1).buffer;
		// }

		// var reverseTable = new Uint32Array(4096);

		// var limit = 1;
		// var bit = 4096 >> 1;

		// var i;

		// while (limit < 4096) {
		// 	for (i = 0; i < limit; i++) {
		// 		reverseTable[i + limit] = reverseTable[i] + bit;
		// 	}

		// 	limit = limit << 1;
		// 	bit = bit >> 1;
		// }
		// console.log(reverseTable);

	});
// Plotly.newPlot('myDiv', [{
// 	y: [0],
// 	mode: 'lines',
// 	name: 'mobile phone',
// 	line: {
// 		color: '#80CAF6',
// 		width: 1
// 	}
// }, {
// 	y: [0],
// 	mode: 'lines',
// 	name: 'SLM',
// 	line: {
// 		color: '#DF56F1',
// 		width: 1
// 	}
// }], {
// 	template: {
// 		layout: {
// 			title: 'Sound Level (Calibration)',
// 			showlegend: true,
// 			plot_bgcolor: "#343a40",
// 			paper_bgcolor: "#FFF3",
// 			font: {
// 				family: 'Verdana, Geneva, Tahoma, sans-serif',
// 				size: 18,
// 				color: '#FFFFFF'
// 			},
// 			xaxis: {
// 				title: {
// 					text: 'Time(second)',
// 					font: {
// 						family: 'Verdana, Geneva, Tahoma, sans-serif',
// 						size: 18,
// 						color: '#FFFFFF'
// 					},
// 				}
// 			},
// 			yaxis: {
// 				title: {
// 					text: 'dBA',
// 					font: {
// 						family: 'Verdana, Geneva, Tahoma, sans-serif',
// 						size: 18,
// 						color: '#FFFFFF'
// 					}
// 				}
// 			},
// 			legend: {
// 				x: 1,
// 				xanchor: 'right',
// 				y: 0,
// 				font: {
// 					family: 'sans-serif',
// 					size: 12,
// 					color: '#000'
// 				},
// 				bgcolor: '#E2E2E2',
// 				bordercolor: '#FFFFFF',
// 				borderwidth: 2
// 			}
// 		}

// 	}
// });
function upLoadData(dBA) {
	// Your web app's Firebase configuration
	var firebaseConfig = {
		apiKey: "AIzaSyAHkpQ-ihDBoL5hBNQrQIm49s59_6Y7r4w",
		authDomain: "sounddb-2c346.firebaseapp.com",
		databaseURL: "https://sounddb-2c346.firebaseio.com",
		projectId: "sounddb-2c346",
		storageBucket: "sounddb-2c346.appspot.com",
		messagingSenderId: "145669725158",
		appId: "1:145669725158:web:e31507acfd7495e07bd427",
		measurementId: "G-76S8X5EJNG"
	};
	// Initialize Firebase
	firebase.initializeApp(firebaseConfig);
	firebase.analytics();


	// Get a reference to the storage service, which is used to create references in your storage bucket
	var storage = firebase.storage();

	// Create a storage reference from our storage service
	var storageRef = storage.ref();

	var soundDataRef = storageRef.child("SoundData/ios/" + Date.now() + ".json");
	var json = {
		"dBA": dBA
	};

	// convert your object into a JSON-string
	var jsonString = JSON.stringify(json);
	// create a Blob from the JSON-string
	var blob = new Blob([jsonString], {
		type: "application/json"
	});

	soundDataRef.put(blob).then(function(snapshot) {
		console.log('Uploaded a blob!');
	});
}
